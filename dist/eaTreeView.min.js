/*!
 * angular-tree-view
 * https://github.com/engineer-andrew/Angular-Tree-View
 * Version: 1.0.0 - 2016-10-18T19:35:00.000Z
 * License: GPL-3.0
 */
angular.module("ea.treeview",[]),angular.module("ea.treeview").directive("eaTreeView",function(){return{controller:["$scope",function(e){this.isRoot=e.isRoot}],link:function(e){e.callback=e.callback()},restrict:"E",scope:{callback:"&",isRoot:"@",items:"="},template:'<ea-tree-view-item item="item" callback="callback" data-ng-repeat="item in items"></ea-tree-view-item>'}}),angular.module("ea.treeview").factory("eaTreeViewFactory",["$rootScope",function(e){var t={items:[]},i={bindEvent:function(t){t=t||"$stateChangeSuccess",e.$on(t,function(e,t){i.setActive(t.name)})},getItems:function(){return t.items},setActive:function(e,a,n,c,r){a=a||t.items,n=n||!1,c=c||0;for(var o=a.length;--o>=0;)a[o].items&&a[o].items.length?(n=i.setActive(e,a[o].items,n,c+1,r),n&&!r&&(a[o].expanded=!0,0===c&&(r=!0))):n?a[o].isActive=!1:a[o].stateName&&a[o].stateName===e?(a[o].isActive=!0,n=!0):a[o].isActive=!1;return n},setItems:function(e){t.items=e}};return i}]),angular.module("ea.treeview").directive("eaTreeViewItem",["eaTreeViewFactory",function(e){return{link:function(t,i,a,n){t.callback=t.callback(),t.activate=function(){e.setActive(t.item.stateName),t.callback(t.item)},t.hasChildren=function(){return!!t.item.items&&!!t.item.items.length},t.hasParent=function(){return!n.isRoot},t.toggleExpanded=function(){t.item.expanded=!t.item.expanded}},require:"^eaTreeView",restrict:"E",scope:{callback:"&",item:"="},templateUrl:"treeViewItem.html"}}]);